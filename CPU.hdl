// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
// Distiguishes the A register as an instruction (a) or as a specified address (b)
Or(a=aInstruction, b=instruction[5], out=loadA);
// If an A instruction is being used send no data to the other addresses
And(a=instruction[15], b=instruction[4], out=loadD);
And(a=instruction[15], b=jump, out=loadPC);
And(a=instruction[15], b=instruction[3], out=writeM);
// Takes the instructions and puts them into one variable that will input into the A register, selector bit determines wether to keep the new instruction or repeat the output of the ALU
Mux16(a=aluOutput, b=instruction, sel=aInstruction, out=aInput);
// Sends A register commands to specified memory addresses
ARegister(in=aInput, load=loadA, out=aRegister, out[0..14]=addressM);
// Sends D register commands to the specified memory addresses
DRegister(in=aluOutput, load=loadD, out=dRegister);
// Takes two inputs and makes them into one to be used as the input for the alu, the selector bit at [12] is determining which one goes
Mux16(a=aRegister, b=inM, sel=instruction[12], out=aluInput);
// Alu result is determined by the number being held at each instruction, 1 means you do it 0 means you don't
ALU(x=dRegister,y=aluInput,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluout,out=outM,zr=zero,ng=neg);
// Program will jump if less than or equal to zero after negating the values at the specified adresses
JLE(zero=zero, neg=neg, code=instruction[0..2], out=jump
// Program counter will start or reset and obtain new A register value
PC(in=aRegister, load=loadPC, inc=true, reset=reset, out[0..14]=pc);





	


}
