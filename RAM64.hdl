// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way(in=load,sel=address[3..5],a=load1,b=load2,c=load3,d=load4,e=load5,f=load6,g=load7,h=load8);
	RAM8(in=load,load-load1,address=address[0..2],out=RAMout1);
	RAM8(in=load,load-load2,address=address[0..2],out=RAMout2);
	RAM8(in=load,load-load3,address=address[0..2],out=RAMout3);
	RAM8(in=load,load-load4,address=address[0..2],out=RAMout4);
	RAM8(in=load,load-load5,address=address[0..2],out=RAMout5);
	RAM8(in=load,load-load6,address=address[0..2],out=RAMout6);
	RAM8(in=load,load-load7,address=address[0..2],out=RAMout7);
	RAM8(in=load,load-load8,address=address[0..2],out=RAMout8);
	Mux8Way(a=RAMout1,b=RAMout2,c=RAMout3,d=RAMout4,e=RAMout5,f=RAMout6,g=RAMout7,h=RAMout8,sel=address[3..5],out=out);
	

	
}